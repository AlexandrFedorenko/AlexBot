const axios = require('axios');
const { Markup } = require('telegraf');

async function showCityMenu(ctx) {
  const cityButtons = [
    ['–°—É–º—ã', '–ö–∏–µ–≤'],
    ['–•–∞—Ä—å–∫–æ–≤', '–õ—å–≤–æ–≤'],
    ['–û–¥–µ—Å—Å–∞', '–î–Ω–µ–ø—Ä'],
    ['–ß–µ—Ä–Ω–∏–≥–æ–≤', '–ó–∞–ø–æ—Ä–æ–∂—å–µ'],
    ['–í–∏–Ω–Ω–∏—Ü–∞', '–ü–æ–ª—Ç–∞–≤–∞'],
    ['–ß–µ—Ä–∫–∞—Å—Å—ã', '–ò–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫–æ–≤—Å–∫'],
    ['‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é', 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
  ];

  ctx.reply(
    'üèôÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–≥–æ–¥—ã:*',
    Markup.keyboard(cityButtons).resize()
  );
}

/**
 * Ask the user to enter the city name manually.
 */
async function handleManualCityInput(ctx) {
  ctx.reply('üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤—Ä—É—á–Ω—É—é:');
}

/**
 * Getting the current weather (for today).
 * @param {Context} ctx - Telegraf context
 * @param {Object} userState - status object for a specific userId
 * @param {string} resultMessage - Weather message template (from texts.json)
 * @param {string} errorMessage -  Error message
 */
async function handleWeatherInput(ctx, userState, resultMessage, errorMessage) {
  const userInputCity = ctx.message.text.trim();

  if (!userInputCity) {
    ctx.reply('üå¶ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.');
    return;
  }

  try {
    const weatherResponse = await axios.get(
      'https://api.openweathermap.org/data/2.5/weather',
      {
        params: {
          q: userInputCity,
          appid: process.env.WEATHER_API_KEY,
          units: 'metric',
          lang: 'ru'
        }
      }
    );

    const weatherData = weatherResponse.data;
    const finalCityName = weatherData.name;
    const temp = Math.round(weatherData.main.temp);
    const feelsLike = Math.round(weatherData.main.feels_like);
    const description = weatherData.weather[0].description;

    const weatherInfo = resultMessage
      .replace('{city}', finalCityName)
      .replace('{temp}', temp)
      .replace('{feels_like}', feelsLike)
      .replace('{description}', description);

    ctx.reply(weatherInfo);
    // do NOT reset userState.weatherState,
    // so that the user can watch several cities in a row in this mode.
  } catch (error) {
    console.error('‚ùå Error when retrieving weather:', error.message);
    ctx.reply('‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.');
  }
}

/**
 * Receive a 3-day weather forecast.
 * @param {Context} ctx
 * @param {Object} userState - status object for a specific userId
 * @param {string} resultMessage - Forecast message template (from texts.json)
 * @param {string} errorMessage - Error message
 */
async function handleWeatherForecast(ctx, userState, resultMessage, errorMessage) {
  const userInputCity = ctx.message.text.trim();

  if (!userInputCity) {
    ctx.reply('üå¶ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ 3 –¥–Ω—è.');
    return;
  }

  try {
    const forecastResponse = await axios.get(
      'https://api.openweathermap.org/data/2.5/forecast',
      {
        params: {
          q: userInputCity,
          appid: process.env.WEATHER_API_KEY,
          units: 'metric',
          lang: 'ru',
          cnt: 24
        }
      }
    );

    const forecastData = forecastResponse.data;
    const city = forecastData.city.name;

    let forecastMessage = `üå¶ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 3 –¥–Ω—è –≤ –≥–æ—Ä–æ–¥–µ ${city}:\n\n`;

    // We take data every 8 blocks (24 hours / 3 hours = 8)
    for (let i = 0; i < forecastData.list.length; i += 8) {
      const day = forecastData.list[i];
      const date = new Date(day.dt * 1000).toLocaleDateString('ru-RU');
      const temp = Math.round(day.main.temp);
      const feelsLike = Math.round(day.main.feels_like);
      const description = day.weather[0].description;

      forecastMessage += `üìÖ **${date}**:\n`;
      forecastMessage += `üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${temp}¬∞C\n`;
      forecastMessage += `ü§î –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: ${feelsLike}¬∞C\n`;
      forecastMessage += `‚òÅÔ∏è ${description}\n\n`;
    }

    ctx.reply(forecastMessage);
    // do NOT reset userState.weatherState, so that the user can view
    // several cities in a row in ‚Äú3-day forecast‚Äù mode.
  } catch (error) {
    console.error('‚ùå Error when receiving weather forecast', error.message);
    ctx.reply('‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–∞ –ö–∏—Ä–∏–ª–ª–∏—Ü–µ.');
  }
}

module.exports = {
  showCityMenu,
  handleManualCityInput,
  handleWeatherInput,
  handleWeatherForecast
};
