require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const fs = require('fs');
const axios = require('axios');
const schedule = require('node-schedule');

const {
  showCityMenu,
  handleManualCityInput,
  handleWeatherInput,
  handleWeatherForecast
} = require('./handlers/weather');

const { handleMotivation } = require('./handlers/motivation');
const { handleRates } = require('./handlers/rates');
const { getTimeUntilNewYear } = require('./handlers/newyear');
const handleListUsers = require('./handlers/listUsers');
const { saveUser, loadUsers, deleteUser } = require('./utils/users');
const { handleHoroscope } = require('./handlers/horoscope');

const BOT_API_TOKEN = process.env.BOT_API_TOKEN;
const ADMIN_ID = parseInt(process.env.ADMIN_ID, 10);
const NODE_ENV = process.env.NODE_ENV || 'development';
const isProduction = NODE_ENV === 'production';
const WEBHOOK_DOMAIN = process.env.WEBHOOK_DOMAIN;
const PORT = process.env.PORT || 3000;

process.env.TZ = process.env.TIMEZONE || 'UTC';

// Check for correct environment variables
if (!BOT_API_TOKEN || isNaN(ADMIN_ID)) {
  console.error('Error: BOT_API_TOKEN –∏–ª–∏ ADMIN_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã/–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã –≤ .env');
  process.exit(1);
}

const bot = new Telegraf(BOT_API_TOKEN);
let userStates = {};

/**
 * Load texts from texts.json file
 */
function loadTexts() {
  const filePath = './texts.json';
  if (fs.existsSync(filePath)) {
    try {
      return JSON.parse(fs.readFileSync(filePath, 'utf-8'));
    } catch (error) {
      console.error('Error while parsing texts.json:', error.message);
      process.exit(1);
    }
  } else {
    console.error('Error: The texts.json file was not found!');
    process.exit(1);
  }
}

const texts = loadTexts();

// Connect user listing logic (admin functionality)
handleListUsers(bot, texts, ADMIN_ID);

/**
 * ScheduleJob
 */
function scheduleMessage(date, message) {
  schedule.scheduleJob(date, async () => {
    console.log(`The dispatch scheduler is running: ${new Date()}`);

    try {
      const users = await loadUsers();
      for (const user of users) {
        const telegramId = user.telegramId;
        await bot.telegram.sendMessage(telegramId, message);
        console.log(`Message sent to user ${user.username}`);
      }
    } catch (error) {
      console.error('Error when sending scheduled messages:', error.message);
    }
  });
}


const date1 = new Date('2024-12-28T12:00:15');
const message1 = '–ü—Ä–∏–≤—ñ—Ç! –ù–∞–≥–∞–¥—É—î–º–æ, —â–æ —Å–∫–æ—Ä–æ –ù–æ–≤–∏–π —Ä—ñ–∫. –ì–æ—Ç—É–π—Ç–µ—Å—è –¥–æ —Å–≤—è—Ç! "–•–∏–ª—å–Ω–∏ —á–∞—Ä–∫—É üòâüéÜ" üéÑ';

const date4 = new Date('2024-12-24T20:35:15');
const message4 = '–¢–µ—Å—Ç: –ü—Ä–∏–≤—ñ—Ç! –ù–∞–≥–∞–¥—É—î–º–æ, —â–æ —Å–∫–æ—Ä–æ –ù–æ–≤–∏–π —Ä—ñ–∫. –ì–æ—Ç—É–π—Ç–µ—Å—è –¥–æ —Å–≤—è—Ç! "–•–∏–ª—å–Ω–∏ —á–∞—Ä–∫—É üòâüéÜ" üéÑ';

const date3 = new Date('2024-12-25T10:00:15');
const message3 = 'üéÑ‚ú® –ó –†—ñ–∑–¥–≤–æ–º –•—Ä–∏—Å—Ç–æ–≤–∏–º! ‚ú®üéÑ –ù–µ—Ö–∞–π —Ü–µ —Å–≤—ñ—Ç–ª–µ —Å–≤—è—Ç–æ –ø—Ä–∏–Ω–µ—Å–µ —É –≤–∞—à –¥—ñ–º —Ä–∞–¥—ñ—Å—Ç—å, –∑–∞—Ç–∏—à–æ–∫ —ñ –ª—é–±–æ–≤. ‚ù§Ô∏è –ë–∞–∂–∞—î–º–æ –≤–∞–º –º—ñ—Ü–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤\'—è, –¥—É—à–µ–≤–Ω–æ–≥–æ —Å–ø–æ–∫–æ—é —Ç–∞ –ë–æ–∂–æ—ó –±–ª–∞–≥–æ–¥–∞—Ç—ñ. üåü –ù–µ—Ö–∞–π —É –≤–∞—à–∏—Ö —Å–µ—Ä—Ü—è—Ö –ø–∞–Ω—É—î –≤—ñ—Ä–∞, –Ω–∞–¥—ñ—è —Ç–∞ –ª—é–±–æ–≤. üéÅ –ú–∏—Ä–Ω–æ–≥–æ –Ω–µ–±–∞ –Ω–∞–¥ –≥–æ–ª–æ–≤–æ—é —Ç–∞ —â–∞—Å–ª–∏–≤—ã—Ö —Å–≤—è—Ç! üïäÔ∏èüé∂';

const date2 = new Date('2025-01-01T00:00:00');
const message2 = 'üéÜ‚ú® –ó –ù–æ–≤–∏–º –†–æ–∫–æ–º! ‚ú®üéÜ –ù–µ—Ö–∞–π 2025 —Ä—ñ–∫ —Å—Ç–∞–Ω–µ —Ä–æ–∫–æ–º —â–∞—Å—Ç—è, –∑–¥–æ—Ä–æ–≤\'—è —Ç–∞ –∑–¥—ñ–π—Å–Ω–µ–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–ø–æ–≤—ñ—Ç–Ω–∏—Ö –º—Ä—ñ–π! ü•Ç –ë–∞–∂–∞—î–º–æ –≤–∞–º —è—Å–∫—Ä–∞–≤—ã—Ö –º–æ–º–µ–Ω—Ç—ñ–≤, —Ç–µ–ø–ª–∏—Ö –∑—É—Å—Ç—Ä—ñ—á–µ–π, –Ω–µ–≤–∏—á–µ—Ä–ø–Ω–æ—ó –µ–Ω–µ—Ä–≥—ñ—ó –¥–ª—è –Ω–æ–≤–∏—Ö –∑–≤–µ—Ä—à–µ–Ω—å —Ç–∞ –º–∏—Ä–Ω–æ–≥–æ –Ω–µ–±–∞ –Ω–∞–¥ –≥–æ–ª–æ–≤–æ—é. üåü –ó—ñ —Å–≤—è—Ç–æ–º! üéÑüéÅüòâ';

// Scheduling a shipment
scheduleMessage(date1, message1);
scheduleMessage(date2, message2);
scheduleMessage(date3, message3);
scheduleMessage(date4, message4);

/**
 * /start
 */
bot.start(async (ctx) => {
  const userId = ctx.from.id;
  const username = ctx.from.username
    ? `@${ctx.from.username}`
    : (ctx.from.first_name || 'noname');

  console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} —Å Telegram ID ${userId} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.`);

  // Check if there is a user in the database
  try {
    const users = await loadUsers();
    const isExisting = users.some((u) => Number(u.telegramId) === Number(userId));

    if (!isExisting) {
      await saveUser({
        telegramId: userId,
        username,
        createdAt: new Date().toISOString(),
      });
      console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ Firestore.`);
    }
  } catch (err) {
    console.error('Error when validating/adding a user in Firestore:', err.message);
  }

  const buttons = [
    [texts.buttons.new_year, texts.buttons.weather],
    [texts.buttons.weather_3days, texts.buttons.horoscope],
    [texts.buttons.motivation, texts.buttons.rates],
  ];

  if (userId === ADMIN_ID) {
    buttons.push(
      [texts.buttons.remove_user, texts.buttons.list_recipients]
    );
  }

  ctx.reply(texts.start_message, Markup.keyboard(buttons).resize());
});

/**
 * ‚ÄúHow long till New Year's Eve‚Äù button.
 */
bot.hears(texts.buttons.new_year, (ctx) => {
  const newYearMessageTemplate = texts.messages.new_year_time;
  const timeUntilNewYear = getTimeUntilNewYear(newYearMessageTemplate);
  ctx.reply(timeUntilNewYear);
});

/**
 * Today's Weather button
 */
bot.hears(texts.buttons.weather, async (ctx) => {
  const userId = ctx.from.id;
  userStates[userId] = userStates[userId] || {};

  userStates[userId].weatherState = 'today';
  userStates[userId].previousWeatherState = 'today';

  await showCityMenu(ctx);
});

/**
 * 3-day weather button
 */
bot.hears(texts.buttons.weather_3days, async (ctx) => {
  const userId = ctx.from.id;
  userStates[userId] = userStates[userId] || {};

  // 3-Day Mode
  userStates[userId].weatherState = 'forecast';
  userStates[userId].previousWeatherState = 'forecast';

  await showCityMenu(ctx);
});

/**
 * Motivation button
 */
bot.hears(texts.buttons.motivation, async (ctx) => {
  await handleMotivation(
    ctx,
    texts.messages.motivation_generating,
    texts.messages.motivation_result,
    texts.messages.motivation_error,
    texts
  );
});

/**
 * Currency rates button
 */
bot.hears(texts.buttons.rates, async (ctx) => {
  await handleRates(
    ctx,
    texts.messages.rates_generating,
    texts.messages.rates_result,
    texts.messages.rates_error
  );
});

/**
 * Delete user‚Äù button (admin)
 */
bot.hears(texts.buttons.remove_user, (ctx) => {
  const userId = ctx.from.id;
  if (userId === ADMIN_ID) {
    userStates[userId] = userStates[userId] || {};
    userStates[userId].removeUserState = true;
    ctx.reply('–í–≤–µ–¥–∏—Ç–µ username (—Å @) –∏–ª–∏ –∏–º—è, –∫–∞–∫ –æ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –±–∞–∑–µ, –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:');
  } else {
    ctx.reply(texts.messages.no_permission);
  }
});

/**
 * To main menu button
 */
bot.hears(texts.buttons.back_to_main, (ctx) => {
  const userId = ctx.from.id;
  userStates[userId] = {};

  const buttons = [
    [texts.buttons.new_year, texts.buttons.weather],
    [texts.buttons.weather_3days, texts.buttons.horoscope],
    [texts.buttons.motivation, texts.buttons.rates],
  ];

  if (userId === ADMIN_ID) {
    buttons.push(
      [texts.buttons.remove_user, texts.buttons.list_recipients]
    );
  }

  ctx.reply(texts.start_message, Markup.keyboard(buttons).resize());
});

/**
 * Horoscope button
 */
bot.hears(texts.buttons.horoscope, (ctx) => {
  const userId = ctx.from.id;
  userStates[userId] = userStates[userId] || {};
  userStates[userId].horoscopeMenu = true;

  const zodiacButtons = [
    [texts.zodiac_buttons.aries, texts.zodiac_buttons.taurus],
    [texts.zodiac_buttons.gemini, texts.zodiac_buttons.cancer],
    [texts.zodiac_buttons.leo, texts.zodiac_buttons.virgo],
    [texts.zodiac_buttons.libra, texts.zodiac_buttons.scorpio],
    [texts.zodiac_buttons.sagittarius, texts.zodiac_buttons.capricorn],
    [texts.zodiac_buttons.aquarius, texts.zodiac_buttons.pisces],
    [texts.buttons.back_to_main]
  ];

  ctx.reply(
    texts.messages.horoscope_prompt,
    Markup.keyboard(zodiacButtons).resize()
  );
});

/**
 * Handling zodiac sign buttons (if user is in 'horoscope_menu' mode)
 */
bot.hears([
  texts.zodiac_buttons.aries,
  texts.zodiac_buttons.taurus,
  texts.zodiac_buttons.gemini,
  texts.zodiac_buttons.cancer,
  texts.zodiac_buttons.leo,
  texts.zodiac_buttons.virgo,
  texts.zodiac_buttons.libra,
  texts.zodiac_buttons.scorpio,
  texts.zodiac_buttons.sagittarius,
  texts.zodiac_buttons.capricorn,
  texts.zodiac_buttons.aquarius,
  texts.zodiac_buttons.pisces
], async (ctx) => {
  const userId = ctx.from.id;
  const userState = userStates[userId] || {};

  if (!userState.horoscopeMenu) {
    return ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø", —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞.');
  }

  const signMap = {
    [texts.zodiac_buttons.aries]: 'aries',
    [texts.zodiac_buttons.taurus]: 'taurus',
    [texts.zodiac_buttons.gemini]: 'gemini',
    [texts.zodiac_buttons.cancer]: 'cancer',
    [texts.zodiac_buttons.leo]: 'leo',
    [texts.zodiac_buttons.virgo]: 'virgo',
    [texts.zodiac_buttons.libra]: 'libra',
    [texts.zodiac_buttons.scorpio]: 'scorpio',
    [texts.zodiac_buttons.sagittarius]: 'sagittarius',
    [texts.zodiac_buttons.capricorn]: 'capricorn',
    [texts.zodiac_buttons.aquarius]: 'aquarius',
    [texts.zodiac_buttons.pisces]: 'pisces'
  };

  const selectedSign = signMap[ctx.message.text];
  if (selectedSign) {
    await handleHoroscope(ctx, selectedSign, 'today', texts.messages.horoscope_error);
    userState.horoscopeMenu = false;
  } else {
    ctx.reply('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞.');
  }
});

/**
 * Button ‚Äú‚úçÔ∏è Enter manually‚Äù (in the weather menu).
 */
bot.hears('‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é', (ctx) => {
  const userId = ctx.from.id;
  userStates[userId] = userStates[userId] || {};
 
  userStates[userId].weatherState = 'manual_input';

  handleManualCityInput(ctx);
});

bot.hears('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', (ctx) => {
  const userId = ctx.from.id;
  userStates[userId] = {};

  const buttons = [
    [texts.buttons.new_year, texts.buttons.weather],
    [texts.buttons.weather_3days, texts.buttons.horoscope],
    [texts.buttons.motivation, texts.buttons.rates],
  ];

  if (userId === ADMIN_ID) {
    buttons.push(
      [texts.buttons.remove_user, texts.buttons.list_recipients]
    );
  }

  ctx.reply(texts.start_message, Markup.keyboard(buttons).resize());
});

const cityList = [
  '–°—É–º—ã', '–ö–∏–µ–≤', '–•–∞—Ä—å–∫–æ–≤', '–õ—å–≤–æ–≤', '–û–¥–µ—Å—Å–∞', '–î–Ω–µ–ø—Ä',
  '–ß–µ—Ä–Ω–∏–≥–æ–≤', '–ó–∞–ø–æ—Ä–æ–∂—å–µ', '–í–∏–Ω–Ω–∏—Ü–∞', '–ü–æ–ª—Ç–∞–≤–∞',
  '–ß–µ—Ä–∫–∞—Å—Å—ã', '–ò–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫–æ–≤—Å–∫'
];

bot.hears(cityList, async (ctx) => {
  const userId = ctx.from.id;
  const userState = userStates[userId] || {};

  if (userState.weatherState === 'forecast') {
    await handleWeatherForecast(
      ctx,
      userState,
      texts.messages.weather_3days_result,
      texts.messages.weather_3days_error
    );
  } else {
    await handleWeatherInput(
      ctx,
      userState,
      texts.messages.weather_result,
      texts.messages.weather_error
    );
  }
});

bot.on('text', async (ctx) => {
  const userId = ctx.from.id;
  const userState = userStates[userId] || {};

  if (userState.removeUserState) {
    const usernameToRemove = ctx.message.text.trim().toLowerCase();

    try {
      const users = await loadUsers();
      const userFound = users.find((u) =>
        u.username.toLowerCase() === usernameToRemove
      );

      if (!userFound) {
        ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.');
      } else {
        await deleteUser(userFound.docId);
        ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userFound.username} —É–¥–∞–ª—ë–Ω.`);
      }
    } catch (err) {
      console.error('Error when deleting a user from Firestore:', err.message);
      ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
    }

    userState.removeUserState = false;
    return;
  }


  if (userState.weatherState === 'manual_input') {
    
    if (userState.previousWeatherState === 'forecast') {
      await handleWeatherForecast(
        ctx,
        userState,
        texts.messages.weather_3days_result,
        texts.messages.weather_3days_error
      );
    } else {
      await handleWeatherInput(
        ctx,
        userState,
        texts.messages.weather_result,
        texts.messages.weather_error
      );
    }
    return;
  }
});

/**
 * Start Bot
 */
if (isProduction) {
  bot.launch({
    webhook: {
      domain: WEBHOOK_DOMAIN,
      port: PORT,
    },
  });
  console.log('üöÄ Bot launched in webhook mode');
} else {
  bot.launch();
  console.log('üöÄ Bot launched in polling mode');
}

// Graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

// a small fix for free hosting that does not fall asleep, if paid to remove!
setInterval(() => {
  console.log('üöÄ The server is active, execute the task...');
}, 600000);
